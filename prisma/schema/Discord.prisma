// Prisma lacks the ability to upsert many records at once while including their relationships.
//
// Consequently, these models which need to be synced avoid nice-to-have relationships, such as a
// many-to-many relationship between DiscordUserMetadata and DiscordRole) to mitigate dealing with
// that synchronization complexity.
//
// Additionally, they avoid cascading deletions since upserts happen via delete+create transactions.

model DiscordUserMetadata {
  // Common
  id Int @id @default(autoincrement())

  // Properties
  memberId    String   @unique
  displayName String
  roleIds     String[]

  // Relationships
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model DiscordSyncEvent {
  // Common
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  // Usually the entity that gets created 2nd has a required ID in its FK, but we want to preserve sync events
  // if a member is removed from a guild, so the ID must be nullable.
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
}

model DiscordRole {
  // Common
  id Int @id @default(autoincrement())

  // Properties
  name     String  @unique
  roleId   String  @unique
  color    String?
  priority Int
}
